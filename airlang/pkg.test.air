package air.test;

import test="airlang/lexer.test.air";
import {
    test2="airlang/lexer.test2.air";
    test3="airlang/lexer.test3.air";
}

public:

enum Test:sint{
    a=true ? 10 :11,
    b=(10+2)*2.5,
}

static int32[,] var[4],bar[3,3];
static int32[][] var[4],bar[3,3];
static void fun(sint[,] a){

    sint i=0;

    lang.score core=i;

    auto i= core+i*3;
    i,j;
    test.s;

    if(i){}
    elsif(j){}
    elsif(core){}
    else{}

    switch(core){
        case 1:{}
        case i:{}
        default:{}
    }

    for(i=0,j=0;i<20;++i,++j){}
    while(true){}

    do{}while(false);

    try{}
    catch(Exp e){}
    finally{}

}

struct Test:base{
protected:
    int32[,] var;
    union{
        int64 jk;
        struct{
            int32 j;
            int32 k;
        }
    }

    void fun(){}
}

interface inf[base,base2]{
    void func();
    void func2();
}

class cclss : parent [inf]{
    int32[,] var;
    union{
        int64 jk;
        struct{
            int32 j;
            int32 k;
        }
    }
    void func();
    void func2();
}